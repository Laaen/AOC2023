infos: #[]

;; Get the left - right qequence
seq: first read.lines "inputs"
;; Fill the dict with infos
loop map select read.lines "inputs" 'x -> match? x {/^[A-Z]{3}.*/} 'y -> split.by: " = " y 'z -> set infos first z replace last z ["(" ")"] "" 

;; for each of them, we get the number of full loops
res: 1
loop select keys infos 'i -> suffix? i "A" 'stpos [
    cnt: 0
    position: stpos
    ;; The main program
    loop.forever split seq 's[
        inc 'cnt
        if? s="L" -> position: first split.by: ", " get infos position
        else -> position: last split.by: ", " get infos position
        if? suffix? position "Z" -> break
    ]
    res: res * (cnt/(size seq))
]

print res * size seq
